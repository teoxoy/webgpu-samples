(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[841],{5671:function(e,n,t){"use strict";t.d(n,{T:function(){return d}});var r=t(5893),a=t(9008),i=t.n(a),o=t(1163),s=t(7294),l=t(9147),c=t.n(l);t(2684),t(7319);let u=e=>{let n=(0,s.useRef)(null),a=(0,s.useMemo)(()=>e.sources.map(e=>{let{name:n,contents:a}=e;return{name:n,...function(e){let n;let a=null;{a=document.createElement("div");let i=t(4631);n=i(a,{lineNumbers:!0,lineWrapping:!0,theme:"monokai",readOnly:!0})}return{Container:function(t){return(0,r.jsx)("div",{...t,children:(0,r.jsx)("div",{ref(t){a&&t&&(t.appendChild(a),n.setOption("value",e))}})})}}}(a)}}),e.sources),l=(0,s.useRef)(null),u=(0,s.useMemo)(()=>{if(e.gui){let n=t(4376);return new n.GUI({autoPlace:!1})}},[]),d=(0,o.useRouter)(),f=d.asPath.match(/#([a-zA-Z0-9\.\/]+)/),[m,p]=(0,s.useState)(null),[g,y]=(0,s.useState)(null);return(0,s.useEffect)(()=>{f?y(f[1]):y(a[0].name),u&&l.current&&l.current.appendChild(u.domElement);let t={active:!0},r=()=>{t.active=!1};try{let i=n.current,o=e.init({canvas:i,pageState:t,gui:u});o instanceof Promise&&o.catch(e=>{console.error(e),p(e)})}catch(s){console.error(s),p(s)}return r},[]),(0,r.jsxs)("main",{children:[(0,r.jsxs)(i(),{children:[(0,r.jsx)("style",{dangerouslySetInnerHTML:{__html:"\n            .CodeMirror {\n              height: auto !important;\n              margin: 1em 0;\n            }\n\n            .CodeMirror-scroll {\n              height: auto !important;\n              overflow: visible !important;\n            }\n          "}}),(0,r.jsx)("title",{children:"".concat(e.name," - WebGPU Samples")}),(0,r.jsx)("meta",{name:"description",content:e.description})]}),(0,r.jsxs)("div",{children:[(0,r.jsx)("h1",{children:e.name}),(0,r.jsx)("a",{target:"_blank",rel:"noreferrer",href:"https://github.com/".concat("teoxoy/webgpu-samples","/tree/main/").concat(e.filename),children:"See it on Github!"}),(0,r.jsx)("p",{children:e.description}),m?(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("p",{children:"Is WebGPU Enabled?"}),(0,r.jsx)("p",{children:"".concat(m)})]}):null]}),(0,r.jsxs)("div",{className:c().canvasContainer,children:[(0,r.jsx)("div",{style:{position:"absolute",right:10},ref:l}),(0,r.jsx)("canvas",{ref:n})]}),(0,r.jsxs)("div",{children:[(0,r.jsx)("nav",{className:c().sourceFileNav,children:(0,r.jsx)("ul",{children:a.map((e,n)=>(0,r.jsx)("li",{children:(0,r.jsx)("a",{href:"#".concat(e.name),"data-active":g==e.name,onClick(){y(e.name)},children:e.name})},n))})}),a.map((e,n)=>(0,r.jsx)(e.Container,{className:c().sourceFileContainer,"data-active":g==e.name},n))]})]})},d=e=>(0,r.jsx)(u,{...e})},2684:function(){if("end"in GPURenderPassEncoder.prototype||(GPURenderPassEncoder.prototype.end=GPURenderPassEncoder.prototype.endPass),"end"in GPUComputePassEncoder.prototype||(GPUComputePassEncoder.prototype.end=GPUComputePassEncoder.prototype.endPass),navigator.userAgent.indexOf("Firefox")>0){let e={info:{icon:"ℹ️",logFn:console.info},warning:{icon:"⚠️",logFn:console.warn},error:{icon:"⛔",logFn:console.error}},n=GPUDevice.prototype.createShaderModule;function t(e){let n=GPUDevice.prototype[e];GPUDevice.prototype[e]=function(e){return"auto"==e.layout&&delete e.layout,n.call(this,e)}}GPUDevice.prototype.createShaderModule=function(t){t.code=t.code.replaceAll("vec4f","vec4<f32>").replaceAll("vec3f","vec3<f32>").replaceAll("vec2f","vec2<f32>").replaceAll("vec4u","vec4<u32>").replaceAll("vec3u","vec3<u32>").replaceAll("vec2u","vec2<u32>").replaceAll("mat4x4f","mat4x4<f32>");let r=n.call(this,t);return r.compilationInfo().then(n=>{if(!n.messages.length)return;let t={error:0,warning:0,info:0};for(let a of n.messages)t[a.type]+=1;0==t.error&&validationError&&(t.error=1);let i=r.label,o=(i?'"'.concat(i,'"'):"Shader")+" returned compilation messages:";for(let s in t)t[s]>0&&(o+=" ".concat(t[s]).concat(e[s].icon));for(let l of(0==t.error?console.groupCollapsed(o):console.group(o),n.messages)){let c=l.type;e[c].logFn(l.message)}console.groupEnd()}),r},t("createRenderPipeline"),t("createRenderPipelineAsync"),t("createComputePipeline"),t("createComputePipelineAsync");let r=GPUCommandEncoder.prototype.beginRenderPass;GPUCommandEncoder.prototype.beginRenderPass=function(e){if(e.colorAttachments)for(let n of e.colorAttachments)"clear"==n.loadOp?n.loadValue=n.clearValue||[0,0,0,0]:n.loadValue="load";if(e.depthStencilAttachment){let t=e.depthStencilAttachment;"load"==t.depthLoadOp?t.depthLoadValue="load":t.depthLoadValue=t.depthClearValue||1,t.depthStoreOp||(t.depthStoreOp="discard"),"load"==t.stencilClearValue?t.stencilLoadValue="load":t.stencilLoadValue=t.stencilClearValue||0,t.stencilStoreOp||(t.stencilStoreOp="discard")}return r.call(this,e)};let a=HTMLCanvasElement.prototype.getContext;HTMLCanvasElement.prototype.getContext=function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];let r=a.apply(this,n);return"webgpu"==n[0]&&(r.canvas=this),r};let i={},o=GPUCanvasContext.prototype.configure;GPUCanvasContext.prototype.configure=function(e){let n=this;i[n]||(i[n]=new MutationObserver(function(t){let r=!1;for(let a of t)("width"==a.attributeName||"height"==a.attributeName)&&(r=!0);r&&o.call(n,e)})),i[n].observe(n.canvas,{attributes:!0}),o.call(n,e)};let s=GPUCanvasContext.prototype.unconfigure;GPUCanvasContext.prototype.unconfigure=function(e){i[this]&&i[this].disconnect(),s.call(this,e)},GPU.prototype.getPreferredCanvasFormat=function(){return"bgra8unorm"}}},841:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return l}});var r=t(5671),a="struct Time {\n  value : f32,\n}\n\nstruct Uniforms {\n  scale : f32,\n  offsetX : f32,\n  offsetY : f32,\n  scalar : f32,\n  scalarOffset : f32,\n}\n\n@binding(0) @group(0) var<uniform> time : Time;\n@binding(0) @group(1) var<uniform> uniforms : Uniforms;\n\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) v_color : vec4<f32>,\n}\n\n@vertex\nfn vert_main(\n  @location(0) position : vec4<f32>,\n  @location(1) color : vec4<f32>\n) -> VertexOutput {\n  var fade = (uniforms.scalarOffset + time.value * uniforms.scalar / 10.0) % 1.0;\n  if (fade < 0.5) {\n    fade = fade * 2.0;\n  } else {\n    fade = (1.0 - fade) * 2.0;\n  }\n  var xpos = position.x * uniforms.scale;\n  var ypos = position.y * uniforms.scale;\n  var angle = 3.14159 * 2.0 * fade;\n  var xrot = xpos * cos(angle) - ypos * sin(angle);\n  var yrot = xpos * sin(angle) + ypos * cos(angle);\n  xpos = xrot + uniforms.offsetX;\n  ypos = yrot + uniforms.offsetY;\n\n  var output : VertexOutput;\n  output.v_color = vec4(fade, 1.0 - fade, 0.0, 1.0) + color;\n  output.Position = vec4(xpos, ypos, 0.0, 1.0);\n  return output;\n}\n\n@fragment\nfn frag_main(@location(0) v_color : vec4<f32>) -> @location(0) vec4<f32> {\n  return v_color;\n}\n",i="src/sample/animometer/main.ts";let o=async e=>{let n,t,r,{canvas:i,pageState:o,gui:s}=e,l=await navigator.gpu.requestAdapter(),c=await l.requestDevice();if(!o.active)return;let u=document.createElement("div");u.style.color="white",u.style.background="black",u.style.position="absolute",u.style.top="10px",u.style.left="10px";let d=document.createElement("pre");u.appendChild(d),i.parentNode.appendChild(u);let f=new URLSearchParams(window.location.search),m={numTriangles:Number(f.get("numTriangles"))||2e4,renderBundles:Boolean(f.get("renderBundles")),dynamicOffsets:Boolean(f.get("dynamicOffsets"))},p=i.getContext("webgpu"),g=window.devicePixelRatio||1;i.width=i.clientWidth*g,i.height=i.clientHeight*g;let y=navigator.gpu.getPreferredCanvasFormat();p.configure({device:c,format:y,alphaMode:"opaque",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});let v=c.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform",minBindingSize:4}}]}),E=c.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform",minBindingSize:20}}]}),h=c.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform",hasDynamicOffset:!0,minBindingSize:20}}]}),P=4*Float32Array.BYTES_PER_ELEMENT,T=c.createPipelineLayout({bindGroupLayouts:[v,E]}),B=c.createPipelineLayout({bindGroupLayouts:[v,h]}),b=c.createShaderModule({code:a}),x={layout:"auto",vertex:{module:b,entryPoint:"vert_main",buffers:[{arrayStride:2*P,stepMode:"vertex",attributes:[{shaderLocation:0,offset:0,format:"float32x4"},{shaderLocation:1,offset:P,format:"float32x4"}]}]},fragment:{module:b,entryPoint:"frag_main",targets:[{format:y}]},primitive:{topology:"triangle-list",frontFace:"ccw",cullMode:"none"}},A=c.createRenderPipeline({...x,layout:T}),S=c.createRenderPipeline({...x,layout:B}),_=c.createBuffer({size:6*P,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0});function G(){let e;let n=m.numTriangles,t=5*Float32Array.BYTES_PER_ELEMENT,r=256*Math.ceil(t/256),a=r/Float32Array.BYTES_PER_ELEMENT,i=c.createBuffer({size:n*r+Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM}),o=new Float32Array(n*a),s=Array(n);for(let l=0;l<n;++l)o[a*l+0]=.2*Math.random()+.2,o[a*l+1]=1.8*(Math.random()-.5),o[a*l+2]=1.8*(Math.random()-.5),o[a*l+3]=1.5*Math.random()+.5,o[a*l+4]=10*Math.random(),s[l]=c.createBindGroup({layout:E,entries:[{binding:0,resource:{buffer:i,offset:l*r,size:6*Float32Array.BYTES_PER_ELEMENT}}]});let u=c.createBindGroup({layout:h,entries:[{binding:0,resource:{buffer:i,offset:0,size:6*Float32Array.BYTES_PER_ELEMENT}}]}),d=n*r,f=c.createBindGroup({layout:v,entries:[{binding:0,resource:{buffer:i,offset:d,size:Float32Array.BYTES_PER_ELEMENT}}]}),g=14680064/Float32Array.BYTES_PER_ELEMENT;for(let P=0;P<o.length;P+=g){let T=Math.min(o.length-P,g);c.queue.writeBuffer(i,P*Float32Array.BYTES_PER_ELEMENT,o.buffer,o.byteOffset+P*Float32Array.BYTES_PER_ELEMENT,T*Float32Array.BYTES_PER_ELEMENT)}function B(e){m.dynamicOffsets?e.setPipeline(S):e.setPipeline(A),e.setVertexBuffer(0,_),e.setBindGroup(0,f);let t=[0];for(let a=0;a<n;++a)m.dynamicOffsets?(t[0]=a*r,e.setBindGroup(1,u,t)):e.setBindGroup(1,s[a]),e.draw(3,1,0,0)}let b=new Float32Array([0]),x={colorAttachments:[{view:void 0,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]},G=c.createRenderBundleEncoder({colorFormats:[y]});B(G);let F=G.finish();return function(n){void 0===e&&(e=n),b[0]=(n-e)/1e3,c.queue.writeBuffer(i,d,b.buffer),x.colorAttachments[0].view=p.getCurrentTexture().createView();let t=c.createCommandEncoder(),r=t.beginRenderPass(x);m.renderBundles?r.executeBundles([F]):B(r),r.end(),c.queue.submit([t.finish()])}}new Float32Array(_.getMappedRange()).set([0,.1,0,1,1,0,0,1,-.1,-.1,0,1,0,1,0,1,.1,-.1,0,1,0,0,1,1]),_.unmap();let F=G(),L=()=>{F=G()};s.add(m,"numTriangles",0,2e5).step(1).onFinishChange(L),s.add(m,"renderBundles"),s.add(m,"dynamicOffsets");let C=!0;requestAnimationFrame(function e(a){if(!o.active)return;let i=0;void 0!==n&&(i=a-n),n=a;let s=performance.now();F(a);let l=performance.now()-s;void 0===r&&(r=i),void 0===t&&(t=l),r=.8*r+.2*i,t=.8*t+.2*l,C&&(d.innerHTML="Avg Javascript: ".concat(t.toFixed(2)," ms\nAvg Frame: ").concat(r.toFixed(2)," ms"),C=!1,setTimeout(()=>{C=!0},100)),requestAnimationFrame(e)})},s=()=>(0,r.T)({name:"Animometer",description:"A WebGPU of port of the Animometer MotionMark benchmark.",gui:!0,init:o,sources:[{name:i.substring(22),contents:"import { makeSample, SampleInit } from '../../components/SampleLayout';\n\nimport animometerWGSL from './animometer.wgsl';\n\nconst init: SampleInit = async ({ canvas, pageState, gui }) => {\n  const adapter = await navigator.gpu.requestAdapter();\n  const device = await adapter.requestDevice();\n\n  if (!pageState.active) return;\n\n  const perfDisplayContainer = document.createElement('div');\n  perfDisplayContainer.style.color = 'white';\n  perfDisplayContainer.style.background = 'black';\n  perfDisplayContainer.style.position = 'absolute';\n  perfDisplayContainer.style.top = '10px';\n  perfDisplayContainer.style.left = '10px';\n\n  const perfDisplay = document.createElement('pre');\n  perfDisplayContainer.appendChild(perfDisplay);\n  canvas.parentNode.appendChild(perfDisplayContainer);\n\n  const params = new URLSearchParams(window.location.search);\n  const settings = {\n    numTriangles: Number(params.get('numTriangles')) || 20000,\n    renderBundles: Boolean(params.get('renderBundles')),\n    dynamicOffsets: Boolean(params.get('dynamicOffsets')),\n  };\n\n  const context = canvas.getContext('webgpu') as GPUCanvasContext;\n\n  const devicePixelRatio = window.devicePixelRatio || 1;\n  canvas.width = canvas.clientWidth * devicePixelRatio;\n  canvas.height = canvas.clientHeight * devicePixelRatio;\n  const presentationFormat = navigator.gpu.getPreferredCanvasFormat();\n\n  context.configure({\n    device,\n    format: presentationFormat,\n    alphaMode: 'opaque',\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  const timeBindGroupLayout = device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: {\n          type: 'uniform',\n          minBindingSize: 4,\n        },\n      },\n    ],\n  });\n\n  const bindGroupLayout = device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: {\n          type: 'uniform',\n          minBindingSize: 20,\n        },\n      },\n    ],\n  });\n\n  const dynamicBindGroupLayout = device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: {\n          type: 'uniform',\n          hasDynamicOffset: true,\n          minBindingSize: 20,\n        },\n      },\n    ],\n  });\n\n  const vec4Size = 4 * Float32Array.BYTES_PER_ELEMENT;\n  const pipelineLayout = device.createPipelineLayout({\n    bindGroupLayouts: [timeBindGroupLayout, bindGroupLayout],\n  });\n  const dynamicPipelineLayout = device.createPipelineLayout({\n    bindGroupLayouts: [timeBindGroupLayout, dynamicBindGroupLayout],\n  });\n\n  const shaderModule = device.createShaderModule({\n    code: animometerWGSL,\n  });\n  const pipelineDesc: GPURenderPipelineDescriptor = {\n    layout: 'auto',\n    vertex: {\n      module: shaderModule,\n      entryPoint: 'vert_main',\n      buffers: [\n        {\n          // vertex buffer\n          arrayStride: 2 * vec4Size,\n          stepMode: 'vertex',\n          attributes: [\n            {\n              // vertex positions\n              shaderLocation: 0,\n              offset: 0,\n              format: 'float32x4',\n            },\n            {\n              // vertex colors\n              shaderLocation: 1,\n              offset: vec4Size,\n              format: 'float32x4',\n            },\n          ],\n        },\n      ],\n    },\n    fragment: {\n      module: shaderModule,\n      entryPoint: 'frag_main',\n      targets: [\n        {\n          format: presentationFormat,\n        },\n      ],\n    },\n    primitive: {\n      topology: 'triangle-list',\n      frontFace: 'ccw',\n      cullMode: 'none',\n    },\n  };\n\n  const pipeline = device.createRenderPipeline({\n    ...pipelineDesc,\n    layout: pipelineLayout,\n  });\n\n  const dynamicPipeline = device.createRenderPipeline({\n    ...pipelineDesc,\n    layout: dynamicPipelineLayout,\n  });\n\n  const vertexBuffer = device.createBuffer({\n    size: 2 * 3 * vec4Size,\n    usage: GPUBufferUsage.VERTEX,\n    mappedAtCreation: true,\n  });\n\n  // prettier-ignore\n  new Float32Array(vertexBuffer.getMappedRange()).set([\n    // position data  /**/ color data\n    0, 0.1, 0, 1,     /**/ 1, 0, 0, 1,\n    -0.1, -0.1, 0, 1, /**/ 0, 1, 0, 1,\n    0.1, -0.1, 0, 1,  /**/ 0, 0, 1, 1,\n  ]);\n  vertexBuffer.unmap();\n\n  function configure() {\n    const numTriangles = settings.numTriangles;\n    const uniformBytes = 5 * Float32Array.BYTES_PER_ELEMENT;\n    const alignedUniformBytes = Math.ceil(uniformBytes / 256) * 256;\n    const alignedUniformFloats =\n      alignedUniformBytes / Float32Array.BYTES_PER_ELEMENT;\n    const uniformBuffer = device.createBuffer({\n      size: numTriangles * alignedUniformBytes + Float32Array.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,\n    });\n    const uniformBufferData = new Float32Array(\n      numTriangles * alignedUniformFloats\n    );\n    const bindGroups = new Array(numTriangles);\n    for (let i = 0; i < numTriangles; ++i) {\n      uniformBufferData[alignedUniformFloats * i + 0] =\n        Math.random() * 0.2 + 0.2; // scale\n      uniformBufferData[alignedUniformFloats * i + 1] =\n        0.9 * 2 * (Math.random() - 0.5); // offsetX\n      uniformBufferData[alignedUniformFloats * i + 2] =\n        0.9 * 2 * (Math.random() - 0.5); // offsetY\n      uniformBufferData[alignedUniformFloats * i + 3] =\n        Math.random() * 1.5 + 0.5; // scalar\n      uniformBufferData[alignedUniformFloats * i + 4] = Math.random() * 10; // scalarOffset\n\n      bindGroups[i] = device.createBindGroup({\n        layout: bindGroupLayout,\n        entries: [\n          {\n            binding: 0,\n            resource: {\n              buffer: uniformBuffer,\n              offset: i * alignedUniformBytes,\n              size: 6 * Float32Array.BYTES_PER_ELEMENT,\n            },\n          },\n        ],\n      });\n    }\n\n    const dynamicBindGroup = device.createBindGroup({\n      layout: dynamicBindGroupLayout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: uniformBuffer,\n            offset: 0,\n            size: 6 * Float32Array.BYTES_PER_ELEMENT,\n          },\n        },\n      ],\n    });\n\n    const timeOffset = numTriangles * alignedUniformBytes;\n    const timeBindGroup = device.createBindGroup({\n      layout: timeBindGroupLayout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: uniformBuffer,\n            offset: timeOffset,\n            size: Float32Array.BYTES_PER_ELEMENT,\n          },\n        },\n      ],\n    });\n\n    // writeBuffer too large may OOM. TODO: The browser should internally chunk uploads.\n    const maxMappingLength =\n      (14 * 1024 * 1024) / Float32Array.BYTES_PER_ELEMENT;\n    for (\n      let offset = 0;\n      offset < uniformBufferData.length;\n      offset += maxMappingLength\n    ) {\n      const uploadCount = Math.min(\n        uniformBufferData.length - offset,\n        maxMappingLength\n      );\n\n      device.queue.writeBuffer(\n        uniformBuffer,\n        offset * Float32Array.BYTES_PER_ELEMENT,\n        uniformBufferData.buffer,\n        uniformBufferData.byteOffset + offset * Float32Array.BYTES_PER_ELEMENT,\n        uploadCount * Float32Array.BYTES_PER_ELEMENT\n      );\n    }\n\n    function recordRenderPass(\n      passEncoder: GPURenderBundleEncoder | GPURenderPassEncoder\n    ) {\n      if (settings.dynamicOffsets) {\n        passEncoder.setPipeline(dynamicPipeline);\n      } else {\n        passEncoder.setPipeline(pipeline);\n      }\n      passEncoder.setVertexBuffer(0, vertexBuffer);\n      passEncoder.setBindGroup(0, timeBindGroup);\n      const dynamicOffsets = [0];\n      for (let i = 0; i < numTriangles; ++i) {\n        if (settings.dynamicOffsets) {\n          dynamicOffsets[0] = i * alignedUniformBytes;\n          passEncoder.setBindGroup(1, dynamicBindGroup, dynamicOffsets);\n        } else {\n          passEncoder.setBindGroup(1, bindGroups[i]);\n        }\n        passEncoder.draw(3, 1, 0, 0);\n      }\n    }\n\n    let startTime = undefined;\n    const uniformTime = new Float32Array([0]);\n\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          view: undefined, // Assigned later\n          clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    };\n\n    const renderBundleEncoder = device.createRenderBundleEncoder({\n      colorFormats: [presentationFormat],\n    });\n    recordRenderPass(renderBundleEncoder);\n    const renderBundle = renderBundleEncoder.finish();\n\n    return function doDraw(timestamp) {\n      if (startTime === undefined) {\n        startTime = timestamp;\n      }\n      uniformTime[0] = (timestamp - startTime) / 1000;\n      device.queue.writeBuffer(uniformBuffer, timeOffset, uniformTime.buffer);\n\n      renderPassDescriptor.colorAttachments[0].view = context\n        .getCurrentTexture()\n        .createView();\n\n      const commandEncoder = device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n\n      if (settings.renderBundles) {\n        passEncoder.executeBundles([renderBundle]);\n      } else {\n        recordRenderPass(passEncoder);\n      }\n\n      passEncoder.end();\n      device.queue.submit([commandEncoder.finish()]);\n    };\n  }\n\n  let doDraw = configure();\n\n  const updateSettings = () => {\n    doDraw = configure();\n  };\n  gui\n    .add(settings, 'numTriangles', 0, 200000)\n    .step(1)\n    .onFinishChange(updateSettings);\n  gui.add(settings, 'renderBundles');\n  gui.add(settings, 'dynamicOffsets');\n\n  let previousFrameTimestamp = undefined;\n  let jsTimeAvg = undefined;\n  let frameTimeAvg = undefined;\n  let updateDisplay = true;\n\n  function frame(timestamp) {\n    // Sample is no longer the active page.\n    if (!pageState.active) return;\n\n    let frameTime = 0;\n    if (previousFrameTimestamp !== undefined) {\n      frameTime = timestamp - previousFrameTimestamp;\n    }\n    previousFrameTimestamp = timestamp;\n\n    const start = performance.now();\n    doDraw(timestamp);\n    const jsTime = performance.now() - start;\n    if (frameTimeAvg === undefined) {\n      frameTimeAvg = frameTime;\n    }\n    if (jsTimeAvg === undefined) {\n      jsTimeAvg = jsTime;\n    }\n\n    const w = 0.2;\n    frameTimeAvg = (1 - w) * frameTimeAvg + w * frameTime;\n    jsTimeAvg = (1 - w) * jsTimeAvg + w * jsTime;\n\n    if (updateDisplay) {\n      perfDisplay.innerHTML = `Avg Javascript: ${jsTimeAvg.toFixed(\n        2\n      )} ms\\nAvg Frame: ${frameTimeAvg.toFixed(2)} ms`;\n      updateDisplay = false;\n      setTimeout(() => {\n        updateDisplay = true;\n      }, 100);\n    }\n    requestAnimationFrame(frame);\n  }\n  requestAnimationFrame(frame);\n};\n\nconst Animometer: () => JSX.Element = () =>\n  makeSample({\n    name: 'Animometer',\n    description: 'A WebGPU of port of the Animometer MotionMark benchmark.',\n    gui: true,\n    init,\n    sources: [\n      {\n        name: __filename.substring(__dirname.length + 1),\n        contents: __SOURCE__,\n      },\n      {\n        name: './animometer.wgsl',\n        contents: animometerWGSL,\n        editable: true,\n      },\n    ],\n    filename: __filename,\n  });\n\nexport default Animometer;\n"},{name:"./animometer.wgsl",contents:a,editable:!0}],filename:i});var l=s},9147:function(e){e.exports={canvasContainer:"SampleLayout_canvasContainer__zRR_l",sourceFileNav:"SampleLayout_sourceFileNav__ml48P",sourceFileContainer:"SampleLayout_sourceFileContainer__3s84x"}}}]);